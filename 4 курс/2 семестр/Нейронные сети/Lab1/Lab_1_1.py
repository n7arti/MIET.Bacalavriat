# Нейронные сети 
# Лабораторная работа 1
# Программа диалогового задания гармонического сигнала и его визуализации
import numpy as np
import matplotlib.pyplot as plt

print('-----------------------------------------------------')
print('*** Программа визуализации гармонического сигнала ***')

# Ввод частоты и амплитуды сигнала
f0 = int(input('Введите частоту сигнала в герцах: '))
A = float(input('Введите амплитуду сигнала в условных единицах: '))
phi = float(input('Введите фазу сигнала, рад: '))
NT = int(input('Введите количество периодов наблюдения, ед.: '))
mvis = int(input('Введите коэффициент уменьшения интервала дискретизации: '))

# Вывод введенных данных
print('-----------------------------------------------------')
print('Введенные данные:')
print('Частота сигнала (Гц)                           = ', f0)
print('Амплитуда сигнала (усл.ед.)                    = ', A)
print('Фаза сигнала, рад                              = ', phi)
print('Количество периодов сигнала                    = ', NT)
print('Коэффициент уменьшения интервала дискретизации = ', mvis)
print('-----------------------------------------------------')

w = 2 * np.pi * f0  # Переход к круговой частоте (рад/сек)
T = 1 / f0  # Период исходного сигнала (сек)
dtn = np.pi / w  # Интервал дискретизации Найквиста (теорема Котельникова)
dtv = dtn / mvis  # Интервал дискретизации, пригодный для визуализации

Tnab = NT * T  # Интервал наблюдения (сек)
print(f'Интервал наблюдения  {Tnab} сек')
Nn = int(Tnab / dtn)  # Количество точек в интервале наблюдения для дискретизации Найквиста
Nv = int(
    Tnab / dtv)  # Количество точек в интервале наблюдения для интервала дискретизации,  пригодного для визуализации
print('Количество точек в интервале наблюдения для дискретизации Найквиста = ', Nn)
print('Количество точек в интервале наблюдения для интервала дискретизации, пригодного для визуализации = ', Nv)

tn = np.multiply(dtn,
                 np.arange(0, Nn - 1))  # Вектор времени (сек), дискретизированный в соответствии с критерием Найквиста
tv = np.multiply(dtv, range(0, Nv - 1))  # и c интервалом дискретизации,пригодным для визуализации
y1n = A * np.cos(2 * np.pi * f0 * tn + phi)
y2n = A * np.sin(2 * np.pi * f0 * tn + phi)
# Вектора сигналов, дискретизированных в соответствии с критерием Найквиста
y1v = A * np.cos(2 * np.pi * f0 * tv + phi)
y2v = A * np.sin(2 * np.pi * f0 * tv + phi)
# Вектора сигналов, дискретизированныхc интервалом дискретизации, пригодным для визуализации

plt.figure(1)
plt.subplot(2, 2, 1)
plt.plot(tn, y1n, 'r-*')
plt.axis([0, Tnab, - 1.1 * A, 1.1 * A])
plt.title('Дискретизация по Найквисту')
plt.xlabel('Time, sec')
plt.ylabel('Signal')
plt.subplot(2, 2, 2)
plt.plot(tv, y1v, 'b')
plt.axis([0, Tnab, - 1.1 * A, 1.1 * A])
plt.title('Дискретизация в ' + str(mvis) + ' раз точнее')
plt.xlabel('Time, sec')
plt.ylabel('Signal')
plt.subplot(2, 2, 3)
plt.plot(tn, y2n, 'r-*')
plt.axis([0, Tnab, - 1.1 * A, 1.1 * A])
plt.xlabel('Time, sec')
plt.ylabel('Signal')
plt.subplot(2, 2, 4)
plt.plot(tv, y2v, 'b')
plt.axis([0, Tnab, - 1.1 * A, 1.1 * A])
plt.xlabel('Time, sec')
plt.ylabel('Signal')
plt.show()

print('**********   Конец работы   **********')
